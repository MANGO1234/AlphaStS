# format

import numpy as np
import matplotlib.pyplot as plt
import sys
import json

plt.style.use('seaborn-whitegrid')
fig, ax = plt.subplots(3)
ax[0].set_yscale("log")
ax[1].set_yscale("log")
ax[2].set_yscale("log")

if len(sys.argv) > 1:
    with open(f'{sys.argv[1]}/training.json', 'r') as f:
        training_info = json.load(f)
    cur_iteration = int(training_info['iteration'])
    info = []
    for i in range(1, cur_iteration):
        info.append(training_info['iteration_info'][str(i)])
    print(f'x0 = np.linspace(0, {cur_iteration - 1}, {cur_iteration - 1})')
    print(f'y0 = [{", ".join([str(x["death_rate"]) for x in info])}]')
    print(f'ax[0].plot(x0, y0, label=\'???\')')
    print(f'y1 = [{", ".join([str(x["avg_dmg_no_death"]) for x in info])}]')
    print(f'ax[1].plot(x0, y1, label=\'???\')')
    print(f'x1 = [{", ".join([str(x["accumulated_time"]) for x in info])}]')
    print(f'ax[2].plot(x1, y1, label=\'???\')')
    exit(0)

x0 = np.linspace(0, 30, 30)
y0 = [96.6, 29.5, 15.5, 12.9, 16.1, 10.3, 10.1, 8.6, 6.3, 6.7, 5.1, 4.3, 3.4, 4.1, 4.4, 3.3, 3.87, 3.7, 2.6, 3.9, 3.86, 3.38, 2.91, 2.88, 2.9, 2.96, 3.0, 3.72, 3.4, 3.48]
ax[0].plot(x0, y0, label='Laga Potion On')
y1 = [57.47, 49.63, 44.29, 42.62, 44.57, 40.5, 38.89, 36.83, 35.53, 34.07, 34.24, 33.27, 33.52, 32.23, 33.6,
      32.1, 32.26, 31.27, 31.27, 30.73, 31.55, 31.44, 32.05, 31.0, 31.19, 31.24, 30.94, 31.76, 30.8, 30.91]
ax[1].plot(x0, y1, label='Laga Potion On')
x1 = [19.65, 33.79, 46.95, 63.88, 82.87, 99.92, 118.57, 138.83, 160.03, 182.99, 205.87, 228.66, 251.81, 274.24, 295.84,
      317.84, 338.67, 361.73, 385.24, 409.58, 434.72, 459.45, 485.12, 511.22, 533.42, 555.44, 577.39, 599.88, 623.43, 647.96]
ax[2].plot(x1, y1, label='Laga Potion On')

x0 = np.linspace(0, 30, 30)
y0 = [99.2, 29.1, 5.1, 6.3, 5.9, 5.6, 4.1, 4.0, 3.0, 4.2, 2.8, 2.7, 3.1, 3.6, 3.2, 3.1, 3.07, 3.05, 2.48, 3.27, 2.8, 2.78, 2.96, 2.62, 2.86, 2.84, 2.66, 2.34, 2.64, 2.38]
ax[0].plot(x0, y0, label='Laga Potion On #2')
y1 = [53.75, 49.23, 41.97, 40.35, 40.5, 39.1, 37.48, 37.14, 36.0, 35.81, 36.09, 35.06, 34.82, 35.36, 34.43,
      35.12, 35.48, 34.16, 33.9, 33.47, 33.7, 33.35, 33.5, 33.4, 33.25, 33.05, 32.9, 33.1, 31.85, 32.93]
ax[1].plot(x0, y1, label='Laga Potion On #2')
x1 = [14.76, 28.4, 39.93, 53.13, 67.6, 83.5, 102.32, 119.3, 136.87, 154.64, 172.49, 189.89, 208.73, 226.77, 244.48,
      262.91, 280.72, 299.65, 319.55, 339.51, 360.3, 381.03, 401.95, 423.26, 445.27, 469.2, 494.58, 521.68, 546.98, 573.66]
ax[2].plot(x1, y1, label='Laga Potion On #2')

x0 = np.linspace(0, 30, 30)
y0 = [97.7, 43.3, 17.3, 12.5, 8.6, 7.8, 6.9, 8.8, 8.2, 7.7, 5.8, 7.0, 3.9, 4.8, 3.4, 2.9, 3.0, 3.45, 3.08, 3.0, 2.17, 3.03, 3.09, 2.78, 2.76, 3.56, 3.16, 2.6, 3.12, 2.9]
ax[0].plot(x0, y0, label='Laga Potion On #3')
y1 = [51.78, 54.25, 43.8, 42.48, 41.12, 39.99, 38.98, 37.76, 35.78, 37.01, 36.5, 37.39, 35.36, 35.11, 33.84,
      33.59, 33.6, 32.39, 32.77, 33.84, 32.41, 32.35, 31.62, 31.52, 31.13, 31.37, 30.79, 31.3, 31.33, 31.07]
ax[1].plot(x0, y1, label='Laga Potion On #3')
x1 = [14.57, 29.41, 43.79, 61.15, 77.31, 94.6, 113.11, 134.8, 153.81, 174.09, 195.52, 217.78, 238.77, 258.99, 277.96,
      299.81, 323.05, 345.04, 369.74, 392.24, 416.58, 441.57, 465.84, 488.06, 511.34, 534.17, 557.42, 580.37, 604.2, 627.63]
ax[2].plot(x1, y1, label='Laga Potion On #3')

# x0 = np.linspace(0, 35, 35)
# y0 = [100.00, 90.80, 61.20, 41.80, 36.50, 31.10, 29.20, 29.80, 22.40, 24.50, 18.70, 18.20, 16.10, 17.60, 13.65,
#       16.40, 15.18, 14.06, 13.12, 13.03, 13.06, 14.49, 14.54, 12.28, 12.79, 11.73, 11.81, 11.24, 11.14, 10.86, 10.04, 10.41, 10.31, 10.71, 10.74]
# ax[0].plot(x0, y0, label='max MCGS (200*100+CC+0.1+noise+no clone)')
# y1 = [41.0, 33.16, 30.1, 22.6, 22.36, 21.31, 21.6, 20.83, 20.01, 21.16, 19.82, 18.91, 19.82, 19.65, 18.88, 18.75, 18.93,
#       18.25, 18.3, 17.94, 18.5, 18.19, 17.88, 17.33, 17.45, 17.3, 17.63, 17.51, 17.95, 17.39, 17.18, 17.56, 17.66, 17.61, 17.75]
# ax[1].plot(x0, y1, label='max MCGS (200*100+CC+0.1+noise+no clone)')
# x2 = [15.36, 28.68, 42.82, 59.53, 81.43, 107.36, 139.22, 170.58, 214.45, 261.41, 312.77, 365.91, 424.03, 485.85, 549.65, 614.09, 685.15,
#       749.59, 818.02, 887.52, 963.38, 1045.44, 1125.38, 1206.26, 1286.07, 1362.79, 1440.13, 1515.69, 1595.3, 1674.73, 1753.08, 1833.8, 1907.06, 1982.7, 2063.09]
# ax[2].plot(x2, y0, label='max MCGS (200*100+CC+0.1+noise+no clone)')

# x0 = np.linspace(0, 35, 35)
# y0 = [99.9, 76.4, 38.2, 30.4, 33.8, 25.5, 25.8, 18.4, 18.0, 16.6, 17.2, 16.1, 17.9, 15.6, 13.05, 14.47, 13.43, 13.42,
#       12.12, 12.19, 11.56, 11.21, 11.57, 10.06, 11.62, 11.77, 10.79, 9.97, 8.99, 9.48, 8.85, 8.92, 9.09, 9.21, 9.23]
# ax[0].plot(x0, y0, label='max MCGS (200*100+CC+0.1+noise+no clone #2)')
# y1 = [35.0, 32.58, 27.84, 25.05, 24.89, 23.81, 22.67, 21.72, 20.04, 20.58, 20.14, 19.41, 19.88, 19.34, 18.74, 19.6, 19.34,
#       19.02, 18.96, 18.58, 18.2, 18.34, 18.32, 18.6, 18.14, 19.09, 18.54, 18.04, 17.8, 17.71, 17.88, 17.69, 17.81, 18.54, 17.94]
# ax[1].plot(x0, y1, label='max MCGS (200*100+CC+0.1+noise+no clone #2)')
# x2 = [17.22, 32.73, 48.59, 67.2, 88.78, 114.01, 142.92, 175.72, 223.49, 271.02, 322.8, 380.11, 438.62, 500.24, 559.95, 621.64, 686.46, 752.08, 822.48,
#       894.08, 963.39, 1032.15, 1109.35, 1187.26, 1266.87, 1342.21, 1419.72, 1498.85, 1582.38, 1657.91, 1732.39, 1810.17, 1883.39, 1958.27, 2033.59]
# ax[2].plot(x2, y0, label='max MCGS (200*100+CC+0.1+noise+no clone #2)')

# x0 = np.linspace(0, 35, 35)
# y0 = [99.60, 94.10, 53.60, 37.80, 32.70, 26.60, 23.30, 19.50, 16.90, 16.20, 13.20, 13.10, 10.70, 11.10, 10.35, 12.53, 11.57,
#       12.82, 10.75, 9.66, 10.99, 9.79, 10.54, 9.96, 9.62, 10.25, 11.04, 9.73, 10.82, 9.69, 8.90, 9.12, 9.70, 8.36, 8.36]
# ax[0].plot(x0, y0, label='max MCGS (200*100+CC+0.1+tanh)')
# y1 = [29.25, 28.93, 28.39, 24.16, 22.55, 21.18, 21.81, 20.44, 20.74, 19.96, 19.36, 18.91, 19.28, 18.09, 18.51, 18.11, 18.1,
#       18.32, 18.32, 17.81, 18.36, 18.01, 17.4, 17.66, 17.36, 17.38, 17.18, 17.61, 17.73, 17.59, 17.42, 17.27, 17.23, 17.14, 17.28]
# ax[1].plot(x0, y1, label='max MCGS (200*100+CC+0.1+tanh)')
# x2 = [19.26, 35.24, 51.75, 72.17, 95.68, 125.37, 157.49, 194.86, 249.83, 304.63, 361.37, 422.27, 483.79, 547.33, 619.51, 692.65, 766.89, 840.79, 913.6,
#       988.39, 1069.34, 1154.42, 1237.56, 1323.21, 1412.01, 1502.75, 1592.39, 1683.1, 1769.16, 1854.02, 1936.24, 2014.14, 2092.83, 2175.25, 2258.13]
# ax[2].plot(x2, y0, label='max MCGS (200*100+CC+0.1+tanh)')

# x0 = np.linspace(0, 35, 35)
# y0 = [82.30, 48.30, 36.90, 26.60, 24.90, 23.60, 20.50, 21.90, 18.30, 16.40, 17.20, 14.80, 12.30, 14.60, 13.25, 16.00, 12.65,
#       13.10, 14.50, 12.04, 13.76, 13.03, 11.78, 12.65, 12.48, 11.52, 10.12, 10.70, 11.57, 10.84, 11.66, 10.45, 11.17, 10.65, 10.65]
# ax[0].plot(x0, y0, label='max MCGS (200*100+CC+0.1+tanh #2)')
# y1 = [28.77, 25.68, 24.32, 23.59, 23.36, 21.93, 21.84, 21.27, 20.07, 19.91, 19.18, 18.44, 18.74, 19.38, 18.56, 17.91, 17.96,
#       17.91, 17.96, 17.83, 17.48, 17.49, 17.44, 17.54, 17.4, 17.15, 17.64, 17.29, 17.11, 17.1, 17.09, 17.43, 17.05, 17.47, 17.18]
# ax[1].plot(x0, y1, label='max MCGS (200*100+CC+0.1+tanh #2)')
# x2 = [19.9, 38.31, 57.78, 78.91, 105.24, 132.81, 164.16, 200.04, 250.63, 305.2, 364.7, 426.85, 492.57, 562.65, 634.48, 704.14, 781.03, 855.39, 931.65,
#       1009.84, 1089.43, 1170.44, 1255.57, 1340.08, 1424.93, 1510.19, 1595.77, 1678.77, 1763.37, 1847.65, 1938.9, 2021.98, 2104.99, 2187.05, 2271.91]
# ax[2].plot(x2, y0, label='max MCGS (200*100+CC+0.1+tanh #2)')

# x0 = np.linspace(0, 35, 35)
# y0 = [100.00, 96.90, 51.60, 41.70, 32.40, 29.30, 27.50, 23.00, 21.70, 19.80, 21.50, 20.50, 20.00, 18.40, 17.40, 16.70, 14.88,
#       15.88, 14.85, 15.53, 12.65, 12.83, 13.39, 11.42, 11.43, 11.62, 11.83, 11.18, 12.45, 10.89, 10.02, 10.24, 10.09, 10.05, 9.05]
# ax[0].plot(x0, y0, label='max MCGS (200*100+0.1+5epoch+tanh+noisedTrain)')
# y1 = [41, 31.48, 27.64, 23.95, 21.41, 22.39, 21.78, 21.64, 21.87, 20.98, 19.16, 20.05, 20.03, 18.95, 18.92, 19.13, 18.66,
#       18.94, 18.8, 18.02, 18.4, 18.25, 18.41, 18.15, 17.92, 18.11, 18.1, 18.24, 18.6, 18.31, 17.46, 17.46, 17.73, 17.74, 17.83]
# ax[1].plot(x0, y1, label='max MCGS (200*100+0.1+5epoch+tanh+noisedTrain)')
# x2 = [13.6, 27.8, 43.91, 63.63, 86.31, 113.08, 142.37, 177.0, 213.21, 250.85, 288.89, 327.95, 368.26, 411.96, 453.94, 496.49, 541.79, 586.89,
#       635.77, 687.47, 740.3, 794.91, 850.68, 908.46, 968.6, 1022.38, 1079.58, 1134.22, 1191.24, 1247.56, 1304.37, 1361.29, 1419.7, 1477.93, 1537.06]
# ax[2].plot(x2, y0, label='max MCGS (200*100+0.1+5epoch+tanh+noisedTrain)')

# x0 = np.linspace(0, 35, 35)
# y0 = [100.00, 96.90, 51.60, 41.70, 32.40, 29.30, 27.50, 23.00, 21.70, 19.80, 21.50, 20.50, 20.00, 18.40, 17.40, 16.70, 14.88,
#       15.88, 14.85, 15.53, 12.65, 12.83, 13.39, 11.42, 11.43, 11.62, 11.83, 11.18, 12.45, 10.89, 10.02, 10.24, 10.09, 10.05, 9.05]
# ax[0].plot(x0, y0, label='max MCGS (200*100+0.1+5epoch+tanh+noisedTrain+300Games)')
# y1 = [41, 31.48, 27.64, 23.95, 21.41, 22.39, 21.78, 21.64, 21.87, 20.98, 19.16, 20.05, 20.03, 18.95, 18.92, 19.13, 18.66,
#       18.94, 18.8, 18.02, 18.4, 18.25, 18.41, 18.15, 17.92, 18.11, 18.1, 18.24, 18.6, 18.31, 17.46, 17.46, 17.73, 17.74, 17.83]
# ax[1].plot(x0, y1, label='max MCGS (200*100+0.1+5epoch+tanh+noisedTrain+300Games)')
# x2 = [13.6, 27.8, 43.91, 63.63, 86.31, 113.08, 142.37, 177.0, 213.21, 250.85, 288.89, 327.95, 368.26, 411.96, 453.94, 496.49, 541.79, 586.89,
#       635.77, 687.47, 740.3, 794.91, 850.68, 908.46, 968.6, 1022.38, 1079.58, 1134.22, 1191.24, 1247.56, 1304.37, 1361.29, 1419.7, 1477.93, 1537.06]
# ax[2].plot(x2, y0, label='max MCGS (200*100+0.1+5epoch+tanh+noisedTrain+300Games)')

# x0 = np.linspace(0, 33, 33)
# y0 = [97.80, 90.70, 41.10, 35.20, 34.00, 25.00, 24.30, 30.90, 24.00, 21.30, 21.20, 16.60, 17.90, 17.60, 12.10, 14.17,
#       13.15, 11.54, 11.03, 11.16, 10.43, 11.14, 10.85, 10.31, 10.69, 9.93, 9.77, 9.14, 8.89, 8.92, 8.97, 9.87, 8.69]
# ax[0].plot(x0, y0, label='max MCGS (200*100+0.1+5epoch+tanh+noised+forcedPolicy)')
# y1 = [36.32, 32.23, 25.95, 24.42, 24.04, 22.46, 22.48, 21.53, 21.67, 21.19, 22.22, 20.24, 19.67, 21.06, 20.33, 19.49,
#       19.49, 19.31, 18.63, 19.63, 18.86, 18.95, 18.98, 18.45, 18.35, 17.86, 18.47, 18.26, 18.03, 18.37, 17.73, 17.98, 17.99]
# ax[1].plot(x0, y1, label='max MCGS (200*100+0.1+5epoch+tanh+noised+forcedPolicy)')
# x2 = [15.28, 29.72, 44.35, 61.28, 82.69, 107.2, 133.91, 165.27, 197.27, 229.37, 263.83, 299.78, 335.44, 373.56, 410.37, 449.55, 490.46,
#       532.15, 578.48, 631.82, 682.4, 733.78, 784.87, 841.74, 902.96, 959.61, 1016.71, 1075.1, 1134.58, 1205.87, 1280.78, 1361.16, 1432.18]
# ax[2].plot(x2, y0, label='max MCGS (200*100+0.1+5epoch+tanh+noised+forcedPolicy)')

# x0 = np.linspace(0, 35, 35)
# y0 = [100.00, 98.90, 61.80, 31.30, 36.30, 26.70, 22.40, 17.90, 19.00, 16.80, 15.90, 13.30, 13.40, 14.30, 15.55, 13.37, 14.20,
#       11.74, 12.35, 12.99, 11.15, 12.26, 13.20, 11.90, 11.19, 10.72, 11.73, 10.88, 11.34, 11.43, 11.01, 10.77, 11.54, 10.26, 10.78]
# ax[0].plot(x0, y0, label='max MCGS (200*100+0.1+5epoch+tanh+noised+forcedPolicy)')
# y1 = [41, 31.45, 27.95, 25.8, 25.62, 23.21, 22.49, 20.64, 20.51, 20.6, 21.77, 20.1, 19.82, 20.07, 20.35, 19.83, 19.93, 19.45,
#       18.29, 18.9, 18.59, 18.21, 19.28, 19.01, 18.7, 18.59, 18.82, 18.46, 18.88, 18.08, 18.49, 18.57, 18.93, 18.2, 19.13]
# ax[1].plot(x0, y1, label='max MCGS (200*100+0.1+5epoch+tanh+noised+forcedPolicy)')
# x2 = [16.05, 28.97, 42.76, 59.83, 79.86, 105.16, 132.7, 162.24, 194.29, 225.58, 259.33, 292.77, 327.79, 363.56, 400.43, 438.62, 481.62, 522.66,
#       567.38, 616.37, 665.09, 715.39, 766.27, 817.65, 870.8, 924.4, 977.63, 1033.73, 1095.44, 1148.27, 1218.02, 1279.08, 1332.46, 1385.28, 1438.09]
# ax[2].plot(x2, y0, label='max MCGS (200*100+0.1+5epoch+tanh+noised+forcedPolicy)')


ax[0].legend()
ax[1].legend()
ax[2].legend()

plt.show()
